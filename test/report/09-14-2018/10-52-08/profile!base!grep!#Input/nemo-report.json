{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2018-09-14T05:22:08.960Z",
    "end": "2018-09-14T05:22:10.603Z",
    "duration": 1643,
    "testsRegistered": 5,
    "passPercent": 40,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6b9f34df-8752-415a-8345-3814b1c39845",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "5b0de235-be11-47b5-ad78-52a5afcc526a",
        "title": "#Input #Text One",
        "fullFile": "/Users/anusaini/Work/Code/ft/nemo-v4-testbed/test/spec/Input/text.1.js",
        "file": "/test/spec/Input/text.1.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "#Input #Text One \"before all\" hook",
            "timedOut": false,
            "duration": 1145,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "return createNemo()\n  .then(bindNemo.bind(this));",
            "err": {},
            "isRoot": false,
            "uuid": "0e20c10d-b9e2-42b5-ad53-9dff3f51d06c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "#Input #Text One \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "destroyNemo.call(this);",
            "err": {},
            "isRoot": false,
            "uuid": "36a4637d-3bd4-475a-bce6-037269c03d5c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "should load input.text.1.html and succeed in fetching the placeholder value",
            "fullTitle": "#Input #Text One should load input.text.1.html and succeed in fetching the placeholder value",
            "timedOut": false,
            "duration": 335,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nemo = this.nemo;\nawait nemo.driver.get(nemo.data.baseUrl + 'input.text.1.html');\nawait nemo.view.input.textWaitVisible(40000);\nassert.ok(await nemo.view.input.textPresent());\nconst actual = await nemo.view.input.text().getAttribute('placeholder');\nconst expected = 'placeholder text';\nassert.equal(actual, expected);",
            "err": {},
            "isRoot": false,
            "uuid": "1ccbeb8f-bb82-490f-b40b-d9da138912f3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should load input.text.1.html and succeed in updating the value",
            "fullTitle": "#Input #Text One should load input.text.1.html and succeed in updating the value",
            "timedOut": false,
            "duration": 154,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nemo = this.nemo;\nawait nemo.driver.get(nemo.data.baseUrl + 'input.text.1.html');\nawait nemo.view.input.textWaitVisible(40000);\nassert.ok(await nemo.view.input.textPresent());\nawait nemo.view.input.text().sendKeys('New Value');\nconst actual = await nemo.view.input.text().getAttribute('value');\nconst expected = 'New Value';\nassert.equal(actual, expected);",
            "err": {},
            "isRoot": false,
            "uuid": "ed58b764-870d-4252-90ca-bef4deaf12d4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1ccbeb8f-bb82-490f-b40b-d9da138912f3",
          "ed58b764-870d-4252-90ca-bef4deaf12d4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 489,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "7bad8d45-06d5-4b7e-bbb7-63bbf31baf8e",
        "title": "#Select One Failure 1",
        "fullFile": "/Users/anusaini/Work/Code/ft/nemo-v4-testbed/test/spec/select/select.1.js",
        "file": "/test/spec/select/select.1.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should load select.1.html and fail while changing select value second time",
            "fullTitle": "#Select One Failure 1 should load select.1.html and fail while changing select value second time",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const nemo = this.nemo;\nawait nemo.driver.get(nemo.data.baseUrl + 'select.1.html');\nawait nemo.view.select.select1WaitVisible(40000);\nassert.ok(await nemo.view.select.select1Present());\n/*\nconsole.log(await nemo.view.select.select1().getText()); // All the option text\n    Please select one of the values.\n    A\n    B\n    C\n    D\n*/\nlet actual;\nlet expected = 'B';\nawait nemo.view.select.select1WaitVisible(3000).sendKeys(expected);\nawait takeAScreenShot(`${expected}.select.1`, nemo);\nactual = await nemo.view.select.select1().getAttribute('value');\nassert.equal(actual, expected);\nexpected = 'A';\nawait nemo.view.select.select1WaitVisible(3000).sendKeys(expected);\nawait takeAScreenShot(`${expected}.select.1`, nemo);\nactual = await nemo.view.select.select1().getAttribute('value');\nassert.equal(actual, expected);\nexpected = 'D';\nawait nemo.view.select.select1WaitVisible(3000).sendKeys(expected);\nawait takeAScreenShot(`${expected}.select.1`, nemo);\nactual = await nemo.view.select.select1().getAttribute('value');\nassert.equal(actual, expected);\n\n/* await nemo.view.select.select1WaitVisible(3000).clear();\n *\n * InvalidElementStateError: invalid element state: Element must be user-editable in order to clear it.\n  (Session info: chrome=69.0.3497.81)\n  (Driver info: chromedriver=2.40.565386 (45a059dc425e08165f9a10324bd1380cc13ca363),platform=Mac OS X 10.12.6 x86_64)\n  at Object.checkLegacyResponse (node_modules/selenium-webdriver/lib/error.js:546:15)\n  at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:509:13)\n  at doSend.then.response (node_modules/selenium-webdriver/lib/http.js:441:30)\n  at <anonymous>\n  at process._tickCallback (internal/process/next_tick.js:188:7)\n  From: Task: WebElement.clear()\n  at thenableWebDriverProxy.schedule (node_modules/selenium-webdriver/lib/webdriver.js:807:17)\n  at WebElementPromise.schedule_ (node_modules/selenium-webdriver/lib/webdriver.js:2010:25)\n  at WebElementPromise.clear (node_modules/selenium-webdriver/lib/webdriver.js:2351:17)\n  at Context.<anonymous> (test/select.js:14:53)\n  at <anonymous>\n  at process._tickCallback (internal/process/next_tick.js:188:7)\n  */",
            "err": {},
            "isRoot": false,
            "uuid": "cb231362-9f9a-4b71-8342-d13813872f24",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "cb231362-9f9a-4b71-8342-d13813872f24"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "de140f79-a9cf-4712-9078-a6761911e3b1",
        "title": "#Select One success",
        "fullFile": "/Users/anusaini/Work/Code/ft/nemo-v4-testbed/test/spec/select/select.1.js",
        "file": "/test/spec/select/select.1.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should load select.1.html and succeed in changing select's value",
            "fullTitle": "#Select One success should load select.1.html and succeed in changing select's value",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const nemo = this.nemo;\nawait nemo.driver.get(nemo.data.baseUrl + 'select.1.html');\nawait nemo.view.select.select1WaitVisible(40000);\nassert.ok(await nemo.view.select.select1Present());\nlet actual;\nlet expected = 'B';\nawait nemo.view.select.select1WaitVisible(3000).sendKeys(expected);\nawait takeAScreenShot(`${expected}.select.1`, nemo);\nactual = await nemo.view.select.select1().getAttribute('value');\nassert.equal(actual, expected);",
            "err": {},
            "isRoot": false,
            "uuid": "14ea782a-253e-4a6e-bb95-458642bc5759",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "14ea782a-253e-4a6e-bb95-458642bc5759"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      },
      {
        "uuid": "2cd2e5c0-3e04-4efc-86e2-7a77107964bf",
        "title": "#Select Two",
        "fullFile": "/Users/anusaini/Work/Code/ft/nemo-v4-testbed/test/spec/select/select.2.js",
        "file": "/test/spec/select/select.2.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should load select.2.html and succeed in changing the value",
            "fullTitle": "#Select Two should load select.2.html and succeed in changing the value",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const nemo = this.nemo;\nawait nemo.driver.get(nemo.data.baseUrl + 'select.2.html');\nawait nemo.view.select.select1WaitVisible(40000);\nassert.ok(await nemo.view.select.select1Present());\nlet actual;\nlet expected = 'B';\nawait nemo.view.select.select1WaitVisible(3000).sendKeys(expected);\nawait takeAScreenShot(`${expected}.select.2`, nemo);\nactual = await nemo.view.select.select1().getAttribute('value');\nassert.equal(actual, expected);",
            "err": {},
            "isRoot": false,
            "uuid": "5b2c70e7-2dfb-4409-91ce-1ccbb0c3af67",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "5b2c70e7-2dfb-4409-91ce-1ccbb0c3af67"
        ],
        "duration": null,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2018
}